#pragma once

#ifdef SVQC
	/** Use new sound handling. TODO: use when sounds play correctly on clients */
	bool autocvar_g_debug_globalsounds = false;
#endif

// player sounds, voice messages

.string m_playersoundstr;
..string m_playersoundfld;

REGISTRY(PlayerSounds, BITS(8) - 1)
/*qc2rust::define::PlayerSounds_from*/
#define PlayerSounds_from(i) /*qc2rust::macro_begin::PlayerSounds_from*/_PlayerSounds_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NULL) /*qc2rust::macro_end::PlayerSounds_from*/
#define REGISTER_PLAYERSOUND(id) 	.string _playersound_##id; 	REGISTER(PlayerSounds, playersound, id, m_id, new_pure(PlayerSound)) 	{ 		this.m_playersoundstr = #id; 		this.m_playersoundfld = _playersound_##id; 	}
REGISTER_REGISTRY(PlayerSounds)
REGISTRY_SORT(PlayerSounds)
STATIC_INIT(PlayerSounds_renumber)
{
	FOREACH(PlayerSounds, true, it.m_id = i);
}
REGISTRY_CHECK(PlayerSounds)

REGISTER_PLAYERSOUND(death)
REGISTER_PLAYERSOUND(drown)
REGISTER_PLAYERSOUND(fall)
REGISTER_PLAYERSOUND(falling)
REGISTER_PLAYERSOUND(gasp)
REGISTER_PLAYERSOUND(jump)
REGISTER_PLAYERSOUND(pain100)
REGISTER_PLAYERSOUND(pain25)
REGISTER_PLAYERSOUND(pain50)
REGISTER_PLAYERSOUND(pain75)

.bool instanceOfVoiceMessage;
.int m_playersoundvt;
#define REGISTER_VOICEMSG(id, vt) 	.string _playersound_##id; 	REGISTER(PlayerSounds, playersound, id, m_id, new_pure(VoiceMessage)) 	{ 		this.instanceOfVoiceMessage = true; 		this.m_playersoundstr = #id; 		this.m_playersoundfld = _playersound_##id; 		this.m_playersoundvt = vt; 	}

const int VOICETYPE_PLAYERSOUND = 10;
const int VOICETYPE_TEAMRADIO = 11;
const int VOICETYPE_LASTATTACKER = 12;
const int VOICETYPE_LASTATTACKER_ONLY = 13;
const int VOICETYPE_AUTOTAUNT = 14;
const int VOICETYPE_TAUNT = 15;

REGISTER_VOICEMSG(attack, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(attackinfive, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(coverme, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(defend, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(freelance, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(incoming, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(meet, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(needhelp, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(seenflag, VOICETYPE_TEAMRADIO)
REGISTER_VOICEMSG(taunt, VOICETYPE_TAUNT)
REGISTER_VOICEMSG(teamshoot, VOICETYPE_LASTATTACKER)

// reserved sound names for the future (some models lack sounds for them):
// _VOICEMSG(flagcarriertakingdamage)
// _VOICEMSG(getflag)
// reserved sound names for the future (ALL models lack sounds for them):
// _VOICEMSG(affirmative)
// _VOICEMSG(attacking)
// _VOICEMSG(defending)
// _VOICEMSG(roaming)
// _VOICEMSG(onmyway)
// _VOICEMSG(droppedflag)
// _VOICEMSG(negative)
// _VOICEMSG(seenenemy)

.string m_globalsoundstr;
REGISTRY(GlobalSounds, BITS(8) - 1)
/*qc2rust::define::GlobalSounds_from*/
#define GlobalSounds_from(i) /*qc2rust::macro_begin::GlobalSounds_from*/_GlobalSounds_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NULL) /*qc2rust::macro_end::GlobalSounds_from*/
/*qc2rust::define::REGISTER_GLOBALSOUND*/
#define REGISTER_GLOBALSOUND(id,str) /*qc2rust::macro_begin::REGISTER_GLOBALSOUND*/REGISTER(GlobalSounds, GS,  /*qc2rust::param_begin::id*/id /*qc2rust::param_end::id*/, m_id, new_pure(GlobalSound)) 	{ 		this.m_globalsoundstr =  /*qc2rust::param_begin::str*/str /*qc2rust::param_end::str*/; 	} /*qc2rust::macro_end::REGISTER_GLOBALSOUND*/
REGISTER_REGISTRY(GlobalSounds)
REGISTRY_SORT(GlobalSounds)
STATIC_INIT(GlobalSounds_renumber)
{
	FOREACH(GlobalSounds, true, it.m_id = i);
}
REGISTRY_CHECK(GlobalSounds)
void PrecacheGlobalSound(string samplestring);
PRECACHE(GlobalSounds)
{
	FOREACH(GlobalSounds, true, PrecacheGlobalSound(it.m_globalsoundstr));
}

REGISTER_GLOBALSOUND(STEP, "misc/footstep0 6")
REGISTER_GLOBALSOUND(STEP_METAL, "misc/metalfootstep0 6")
REGISTER_GLOBALSOUND(FALL, "misc/hitground 4")
REGISTER_GLOBALSOUND(FALL_METAL, "misc/metalhitground 4")

bool GetPlayerSoundSampleField_notFound;
void PrecachePlayerSounds(string f);
//#ifdef CSQC
	.string GetVoiceMessageSampleField(string type);
	.string GetPlayerSoundSampleField(string type);
	void ClearPlayerSounds(entity this);
	float LoadPlayerSounds(entity this, string f, bool strict);
	void UpdatePlayerSounds(entity this);
//#endif
entity GetVoiceMessage(string type);

string GlobalSound_sample(string pair, float r);

#ifdef SVQC

	void _GlobalSound(entity this, entity gs, entity ps, string sample, float chan, float vol, float voicetype, bool fake);
/*qc2rust::define::GlobalSound*/
#define GlobalSound(this,def,chan,vol,voicetype) /*qc2rust::macro_begin::GlobalSound*/_GlobalSound( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/,  /*qc2rust::param_begin::def*/def /*qc2rust::param_end::def*/, NULL, string_null,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::vol*/vol /*qc2rust::param_end::vol*/,  /*qc2rust::param_begin::voicetype*/voicetype /*qc2rust::param_end::voicetype*/, false) /*qc2rust::macro_end::GlobalSound*/
/*qc2rust::define::GlobalSound_string*/
#define GlobalSound_string(this,def,chan,vol,voicetype) /*qc2rust::macro_begin::GlobalSound_string*/_GlobalSound( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/, NULL, NULL,  /*qc2rust::param_begin::def*/def /*qc2rust::param_end::def*/,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::vol*/vol /*qc2rust::param_end::vol*/,  /*qc2rust::param_begin::voicetype*/voicetype /*qc2rust::param_end::voicetype*/, false) /*qc2rust::macro_end::GlobalSound_string*/
/*qc2rust::define::PlayerSound*/
#define PlayerSound(this,def,chan,vol,voicetype) /*qc2rust::macro_begin::PlayerSound*/_GlobalSound( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/, NULL,  /*qc2rust::param_begin::def*/def /*qc2rust::param_end::def*/, string_null,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::vol*/vol /*qc2rust::param_end::vol*/,  /*qc2rust::param_begin::voicetype*/voicetype /*qc2rust::param_end::voicetype*/, false) /*qc2rust::macro_end::PlayerSound*/
/*qc2rust::define::VoiceMessage*/
#define VoiceMessage(this,def,msg) /*qc2rust::macro_begin::VoiceMessage*/MACRO_BEGIN 			entity VM =  /*qc2rust::param_begin::def*/def /*qc2rust::param_end::def*/; 			int voicetype = VM.m_playersoundvt; 			bool ownteam = (voicetype == VOICETYPE_TEAMRADIO); 			int flood = Say( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/, ownteam, NULL,  /*qc2rust::param_begin::msg*/msg /*qc2rust::param_end::msg*/, true); 			bool fake; 			if (IS_SPEC( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/) || IS_OBSERVER( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/) || flood < 0) fake = true; 			else if (flood > 0) fake = false; 			else break; 			_GlobalSound( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/, NULL, VM, string_null, CH_VOICE, VOL_BASEVOICE, voicetype, fake); 		MACRO_END /*qc2rust::macro_end::VoiceMessage*/

#endif

string allvoicesamples;
STATIC_INIT(allvoicesamples)
{
    FOREACH(PlayerSounds, it.instanceOfVoiceMessage, allvoicesamples = strcat(allvoicesamples, " ", it.m_playersoundstr));
    allvoicesamples = strzone(substring(allvoicesamples, 1, -1));
}
