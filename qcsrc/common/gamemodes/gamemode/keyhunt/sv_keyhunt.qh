#pragma once

#include <common/mutators/base.qh>
/*qc2rust::define::autocvar_g_keyhunt_point_limit*/
#define autocvar_g_keyhunt_point_limit /*qc2rust::macro_begin::autocvar_g_keyhunt_point_limit*/cvar("g_keyhunt_point_limit") /*qc2rust::macro_end::autocvar_g_keyhunt_point_limit*/
int autocvar_g_keyhunt_point_leadlimit;
bool autocvar_g_keyhunt_team_spawns;
void kh_Initialize();

REGISTER_MUTATOR(kh, false)
{
    MUTATOR_STATIC();
	MUTATOR_ONADD
	{
		GameRules_teams(true);
        GameRules_spawning_teams(autocvar_g_keyhunt_team_spawns);
        GameRules_limit_score(autocvar_g_keyhunt_point_limit);
        GameRules_limit_lead(autocvar_g_keyhunt_point_leadlimit);

		kh_Initialize();
	}
	return 0;
}

/*qc2rust::define::FOR_EACH_KH_KEY*/
#define FOR_EACH_KH_KEY(v) /*qc2rust::macro_begin::FOR_EACH_KH_KEY*/for( /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/ = kh_worldkeylist;  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/;  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/ =  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/.kh_worldkeynext ) /*qc2rust::macro_end::FOR_EACH_KH_KEY*/

// ALL OF THESE should be removed in the future, as other code should not have to care

// used by bots:
bool kh_tracking_enabled;
.entity kh_next;

USING(kh_Think_t, void());
void kh_StartRound();
void kh_Controller_SetThink(float t, kh_Think_t func);
