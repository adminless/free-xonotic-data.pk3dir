#pragma once

#include <common/teams.qh>

// use slots 70-100
const int PROJECTILE_NADE = 71;
const int PROJECTILE_NADE_BURN = 72;
const int PROJECTILE_NADE_NAPALM = 73;
const int PROJECTILE_NADE_NAPALM_BURN = 74;
const int PROJECTILE_NAPALM_FOUNTAIN = 75;
const int PROJECTILE_NADE_ICE = 76;
const int PROJECTILE_NADE_ICE_BURN = 77;
const int PROJECTILE_NADE_TRANSLOCATE = 78;
const int PROJECTILE_NADE_SPAWN = 79;
const int PROJECTILE_NADE_HEAL = 80;
const int PROJECTILE_NADE_HEAL_BURN = 81;
const int PROJECTILE_NADE_MONSTER = 82;
const int PROJECTILE_NADE_MONSTER_BURN = 83;
const int PROJECTILE_NADE_ENTRAP = 84;
const int PROJECTILE_NADE_ENTRAP_BURN = 85;
const int PROJECTILE_NADE_VEIL = 86;
const int PROJECTILE_NADE_VEIL_BURN = 87;

REGISTRY(Nades, BITS(4))
/*qc2rust::define::Nades_from*/
#define Nades_from(i) /*qc2rust::macro_begin::Nades_from*/_Nades_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NADE_TYPE_Null) /*qc2rust::macro_end::Nades_from*/
REGISTER_REGISTRY(Nades)
REGISTRY_CHECK(Nades)

/*qc2rust::define::REGISTER_NADE*/
#define REGISTER_NADE(id) /*qc2rust::macro_begin::REGISTER_NADE*/REGISTER(Nades, NADE_TYPE,  /*qc2rust::param_begin::id*/id /*qc2rust::param_end::id*/, m_id, NEW(Nade)) /*qc2rust::macro_end::REGISTER_NADE*/

CLASS(Nade, Object)
    ATTRIB(Nade, m_id, int, 0);
    ATTRIB(Nade, m_color, vector, '0 0 0');
    ATTRIB(Nade, m_name, string, _("Grenade"));
    ATTRIB(Nade, m_icon, string, "nade_normal");
    ATTRIB(Nade, m_alpha, float, 1);
    ATTRIBARRAY(Nade, m_projectile, int, 2);
    ATTRIBARRAY(Nade, m_trail, entity, 2);
    METHOD(Nade, display, void(entity this, void(string name, string icon) returns)) {
        returns(this.m_name, sprintf("/gfx/hud/%s/%s", cvar_string("menu_skin"), this.m_icon));
    }
ENDCLASS(Nade)

REGISTER_NADE(Null);

Nade Nade_FromProjectile(int proj)
{
    FOREACH(Nades, true, {
        for (int j = 0; j < 2; j++)
        {
            if (it.m_projectile[j] == proj) return it;
        }
    });
    return NADE_TYPE_Null;
}

#ifdef GAMEQC
#include "effects.inc"
#endif

#include "nades.inc"

.float orb_lifetime;
.float orb_radius;

#ifdef SVQC

.entity nade;
.entity fake_nade;
.float nade_refire;
.float nade_special_time;
.string pokenade_type;
.entity nade_damage_target;
.float cvar_cl_nade_type;
.string cvar_cl_pokenade_type;
.float toss_time;
.float nade_show_particles;
.float nade_veil_prevalpha;

bool orb_send(entity this, entity to, int sf);

// Remove nades that are being thrown
void nades_Clear(entity player);

// Give a bonus grenade to a player
void nades_GiveBonus(entity player, float score);

/**
 * called to adjust nade damage and force on hit
 */
/*qc2rust::define::EV_Nade_Damage*/
#define EV_Nade_Damage(i,o) /*qc2rust::macro_begin::EV_Nade_Damage*//** nade */    /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/(entity, MUTATOR_ARGV_0_entity)  	/** weapon */  /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/(entity, MUTATOR_ARGV_1_entity)     /** force */   /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/(vector, MUTATOR_ARGV_2_vector)     /**/           /*qc2rust::param_begin::o*/o /*qc2rust::param_end::o*/(vector, MUTATOR_ARGV_2_vector)  	/** damage */  /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/(float,  MUTATOR_ARGV_3_float)     /**/           /*qc2rust::param_begin::o*/o /*qc2rust::param_end::o*/(float,  MUTATOR_ARGV_3_float)     /**/ /*qc2rust::macro_end::EV_Nade_Damage*/
MUTATOR_HOOKABLE(Nade_Damage, EV_Nade_Damage);

#endif

#ifdef CSQC
bool Projectile_isnade(int proj); // TODO: remove

void DrawAmmoNades(vector myPos, vector mySize, bool draw_expanding, float expand_time); // TODO: mutator
#endif
