#pragma once

// water levels
const int WATERLEVEL_NONE = 0;
const int WATERLEVEL_WETFEET = 1;
const int WATERLEVEL_SWIMMING = 2;
const int WATERLEVEL_SUBMERGED = 3;

/*qc2rust::define::IS_ONGROUND*/
#define IS_ONGROUND(s) /*qc2rust::macro_begin::IS_ONGROUND*/boolean(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).flags & FL_ONGROUND) /*qc2rust::macro_end::IS_ONGROUND*/
/*qc2rust::define::SET_ONGROUND*/
#define SET_ONGROUND(s) /*qc2rust::macro_begin::SET_ONGROUND*/(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).flags |= FL_ONGROUND) /*qc2rust::macro_end::SET_ONGROUND*/
/*qc2rust::define::UNSET_ONGROUND*/
#define UNSET_ONGROUND(s) /*qc2rust::macro_begin::UNSET_ONGROUND*/(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).flags &= ~FL_ONGROUND) /*qc2rust::macro_end::UNSET_ONGROUND*/
/*qc2rust::define::IS_ONSLICK*/
#define IS_ONSLICK(s) /*qc2rust::macro_begin::IS_ONSLICK*/boolean(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).flags & FL_ONSLICK) /*qc2rust::macro_end::IS_ONSLICK*/
/*qc2rust::define::SET_ONSLICK*/
#define SET_ONSLICK(s) /*qc2rust::macro_begin::SET_ONSLICK*/(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).flags |= FL_ONSLICK) /*qc2rust::macro_end::SET_ONSLICK*/
/*qc2rust::define::UNSET_ONSLICK*/
#define UNSET_ONSLICK(s) /*qc2rust::macro_begin::UNSET_ONSLICK*/(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).flags &= ~FL_ONSLICK) /*qc2rust::macro_end::UNSET_ONSLICK*/

/*qc2rust::define::GAMEPLAYFIX_DOWNTRACEONGROUND*/
#define GAMEPLAYFIX_DOWNTRACEONGROUND(s) /*qc2rust::macro_begin::GAMEPLAYFIX_DOWNTRACEONGROUND*/STAT(GAMEPLAYFIX_DOWNTRACEONGROUND) /*qc2rust::macro_end::GAMEPLAYFIX_DOWNTRACEONGROUND*/
/*qc2rust::define::GAMEPLAYFIX_EASIERWATERJUMP*/
#define GAMEPLAYFIX_EASIERWATERJUMP(s) /*qc2rust::macro_begin::GAMEPLAYFIX_EASIERWATERJUMP*/STAT(GAMEPLAYFIX_EASIERWATERJUMP) /*qc2rust::macro_end::GAMEPLAYFIX_EASIERWATERJUMP*/
/*qc2rust::define::GAMEPLAYFIX_STEPDOWN*/
#define GAMEPLAYFIX_STEPDOWN(s) /*qc2rust::macro_begin::GAMEPLAYFIX_STEPDOWN*/STAT(GAMEPLAYFIX_STEPDOWN) /*qc2rust::macro_end::GAMEPLAYFIX_STEPDOWN*/
/*qc2rust::define::GAMEPLAYFIX_STEPMULTIPLETIMES*/
#define GAMEPLAYFIX_STEPMULTIPLETIMES(s) /*qc2rust::macro_begin::GAMEPLAYFIX_STEPMULTIPLETIMES*/STAT(GAMEPLAYFIX_STEPMULTIPLETIMES) /*qc2rust::macro_end::GAMEPLAYFIX_STEPMULTIPLETIMES*/
/*qc2rust::define::GAMEPLAYFIX_UNSTICKPLAYERS*/
#define GAMEPLAYFIX_UNSTICKPLAYERS(s) /*qc2rust::macro_begin::GAMEPLAYFIX_UNSTICKPLAYERS*/STAT(GAMEPLAYFIX_UNSTICKPLAYERS) /*qc2rust::macro_end::GAMEPLAYFIX_UNSTICKPLAYERS*/
/*qc2rust::define::GAMEPLAYFIX_WATERTRANSITION*/
#define GAMEPLAYFIX_WATERTRANSITION(s) /*qc2rust::macro_begin::GAMEPLAYFIX_WATERTRANSITION*/STAT(GAMEPLAYFIX_WATERTRANSITION) /*qc2rust::macro_end::GAMEPLAYFIX_WATERTRANSITION*/
/*qc2rust::define::UPWARD_VELOCITY_CLEARS_ONGROUND*/
#define UPWARD_VELOCITY_CLEARS_ONGROUND(s) /*qc2rust::macro_begin::UPWARD_VELOCITY_CLEARS_ONGROUND*/STAT(GAMEPLAYFIX_UPVELOCITYCLEARSONGROUND) /*qc2rust::macro_end::UPWARD_VELOCITY_CLEARS_ONGROUND*/

/*qc2rust::define::PHYS_STEPHEIGHT*/
#define PHYS_STEPHEIGHT(s) /*qc2rust::macro_begin::PHYS_STEPHEIGHT*/STAT(MOVEVARS_STEPHEIGHT) /*qc2rust::macro_end::PHYS_STEPHEIGHT*/
/*qc2rust::define::PHYS_NOSTEP*/
#define PHYS_NOSTEP(s) /*qc2rust::macro_begin::PHYS_NOSTEP*/STAT(NOSTEP) /*qc2rust::macro_end::PHYS_NOSTEP*/
/*qc2rust::define::PHYS_JUMPSTEP*/
#define PHYS_JUMPSTEP(s) /*qc2rust::macro_begin::PHYS_JUMPSTEP*/STAT(MOVEVARS_JUMPSTEP) /*qc2rust::macro_end::PHYS_JUMPSTEP*/
/*qc2rust::define::PHYS_WALLFRICTION*/
#define PHYS_WALLFRICTION(s) /*qc2rust::macro_begin::PHYS_WALLFRICTION*/STAT(MOVEVARS_WALLFRICTION) /*qc2rust::macro_end::PHYS_WALLFRICTION*/

/*qc2rust::define::PHYS_WALLCLIP*/
#define PHYS_WALLCLIP(s) /*qc2rust::macro_begin::PHYS_WALLCLIP*/STAT(MOVEVARS_WALLCLIP) /*qc2rust::macro_end::PHYS_WALLCLIP*/

#ifdef CSQC
.float bouncestop;
.float bouncefactor;

/*qc2rust::define::GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE*/
#define GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE /*qc2rust::macro_begin::GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE*/(boolean(moveflags & MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE)) /*qc2rust::macro_end::GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE*/
/*qc2rust::define::GAMEPLAYFIX_NOGRAVITYONGROUND*/
#define GAMEPLAYFIX_NOGRAVITYONGROUND /*qc2rust::macro_begin::GAMEPLAYFIX_NOGRAVITYONGROUND*/(boolean(moveflags & MOVEFLAG_NOGRAVITYONGROUND)) /*qc2rust::macro_end::GAMEPLAYFIX_NOGRAVITYONGROUND*/
/*qc2rust::define::GAMEPLAYFIX_Q2AIRACCELERATE*/
#define GAMEPLAYFIX_Q2AIRACCELERATE /*qc2rust::macro_begin::GAMEPLAYFIX_Q2AIRACCELERATE*/(boolean(moveflags & MOVEFLAG_Q2AIRACCELERATE)) /*qc2rust::macro_end::GAMEPLAYFIX_Q2AIRACCELERATE*/

/*qc2rust::define::PHYS_GRAVITY*/
#define PHYS_GRAVITY(s) /*qc2rust::macro_begin::PHYS_GRAVITY*/STAT(MOVEVARS_GRAVITY,  /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/) /*qc2rust::macro_end::PHYS_GRAVITY*/
	// FIXME: 0 doesn't mean zero gravity
/*qc2rust::define::PHYS_ENTGRAVITY*/
#define PHYS_ENTGRAVITY(s) /*qc2rust::macro_begin::PHYS_ENTGRAVITY*/STAT(MOVEVARS_ENTGRAVITY,  /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/) /*qc2rust::macro_end::PHYS_ENTGRAVITY*/

/*qc2rust::define::TICRATE*/
#define TICRATE /*qc2rust::macro_begin::TICRATE*/ticrate /*qc2rust::macro_end::TICRATE*/

#elif defined(SVQC)

/*qc2rust::define::GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE*/
#define GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE /*qc2rust::macro_begin::GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE*/autocvar_sv_gameplayfix_gravityunaffectedbyticrate /*qc2rust::macro_end::GAMEPLAYFIX_GRAVITYUNAFFECTEDBYTICRATE*/
/*qc2rust::define::GAMEPLAYFIX_NOGRAVITYONGROUND*/
#define GAMEPLAYFIX_NOGRAVITYONGROUND /*qc2rust::macro_begin::GAMEPLAYFIX_NOGRAVITYONGROUND*/autocvar_sv_gameplayfix_nogravityonground /*qc2rust::macro_end::GAMEPLAYFIX_NOGRAVITYONGROUND*/
/*qc2rust::define::GAMEPLAYFIX_Q2AIRACCELERATE*/
#define GAMEPLAYFIX_Q2AIRACCELERATE /*qc2rust::macro_begin::GAMEPLAYFIX_Q2AIRACCELERATE*/autocvar_sv_gameplayfix_q2airaccelerate /*qc2rust::macro_end::GAMEPLAYFIX_Q2AIRACCELERATE*/

/*qc2rust::define::PHYS_GRAVITY*/
#define PHYS_GRAVITY(s) /*qc2rust::macro_begin::PHYS_GRAVITY*/autocvar_sv_gravity /*qc2rust::macro_end::PHYS_GRAVITY*/
/*qc2rust::define::PHYS_ENTGRAVITY*/
#define PHYS_ENTGRAVITY(s) /*qc2rust::macro_begin::PHYS_ENTGRAVITY*/(( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/).gravity) /*qc2rust::macro_end::PHYS_ENTGRAVITY*/

/*qc2rust::define::TICRATE*/
#define TICRATE /*qc2rust::macro_begin::TICRATE*/sys_frametime /*qc2rust::macro_end::TICRATE*/

#endif

void set_movetype(entity this, int mt);

.float pm_time;

.float move_movetype;
.float move_time;
//.vector move_origin;
//.vector move_angles;
//.vector move_velocity;
//.vector move_avelocity;
//.int move_flags;
//.int move_watertype;
//.int move_waterlevel;
.void(float, float)contentstransition;
//.float move_bounce_factor;
//.float move_bounce_stopspeed;
.float move_nomonsters;  // -1 for MOVE_NORMAL, otherwise a MOVE_ constant

.entity aiment;
.vector punchangle;

.entity groundentity;  // FIXME add move_groundnetworkentity?
.float move_suspendedinair;
.float move_didgravity;

// unsticking
const int UNSTICK_FINE = 0;
const int UNSTICK_FIXED = 1;
const int UNSTICK_STUCK = 2;

void _Movetype_WallFriction(entity this, vector stepnormal);
int _Movetype_FlyMove(entity this, float dt, bool applygravity, vector stepnormal, float stepheight);
void _Movetype_CheckVelocity(entity this);
void _Movetype_CheckWaterTransition(entity ent);
void _Movetype_CheckStuck(entity this);
float _Movetype_CheckWater(entity ent);
void _Movetype_LinkEdict_TouchAreaGrid(entity this);
void _Movetype_LinkEdict(entity this, float touch_triggers);
vector _Movetype_ClipVelocity(vector vel, vector norm, float f);
void _Movetype_PushEntityTrace(entity this, vector push);
bool _Movetype_PushEntity(entity this, vector push, float failonstartsolid, bool dolink);

void Movetype_Physics_NoMatchTicrate(entity this, float movedt, bool isclient);
void Movetype_Physics_MatchTicrate(entity this, float tr, bool sloppy);
void Movetype_Physics_MatchServer(entity this, bool sloppy);
void Movetype_Physics_NoMatchServer(entity this);
void _Movetype_LinkEdict(entity this, float touch_triggers);
void _Movetype_LinkEdict_TouchAreaGrid(entity this);

int _Movetype_UnstickEntity(entity this);

const int MAX_CLIP_PLANES = 5;

#ifdef CSQC
const int MOVETYPE_NONE             = 0;
const int MOVETYPE_ANGLENOCLIP      = 1;
const int MOVETYPE_ANGLECLIP        = 2;
const int MOVETYPE_WALK             = 3;
const int MOVETYPE_STEP             = 4;
const int MOVETYPE_FLY              = 5;
const int MOVETYPE_TOSS             = 6;
const int MOVETYPE_PUSH             = 7;
const int MOVETYPE_NOCLIP           = 8;
const int MOVETYPE_FLYMISSILE       = 9;
const int MOVETYPE_BOUNCE           = 10;
const int MOVETYPE_BOUNCEMISSILE    = 11;  // Like bounce but doesn't lose speed on bouncing
const int MOVETYPE_FOLLOW           = 12;
const int MOVETYPE_PHYSICS          = 32;
const int MOVETYPE_FLY_WORLDONLY    = 33;

const int FL_ITEM                   = 256;
const int FL_ONGROUND				= 512;
#elif defined(SVQC)
const int MOVETYPE_ANGLENOCLIP      = 1;
const int MOVETYPE_ANGLECLIP        = 2;
#endif

const int MOVETYPE_QCPLAYER = 150; // QC-driven player physics, no think functions!

const int FL_ONSLICK = BIT(20);

const int MOVETYPE_FAKEPUSH         = 13;

const int MOVEFLAG_VALID = BIT(23);
const int MOVEFLAG_Q2AIRACCELERATE = BIT(0);
const int MOVEFLAG_NOGRAVITYONGROUND = BIT(1);
const int MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE = BIT(2);

#ifdef CSQC
/*qc2rust::define::moveflags*/
#define moveflags /*qc2rust::macro_begin::moveflags*/STAT(MOVEFLAGS) /*qc2rust::macro_end::moveflags*/
#endif
