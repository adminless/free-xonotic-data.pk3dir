#pragma once

/*qc2rust::define::MAX_SCORE*/
#define MAX_SCORE /*qc2rust::macro_begin::MAX_SCORE*/64 /*qc2rust::macro_end::MAX_SCORE*/

/*qc2rust::define::REGISTER_SP*/
#define REGISTER_SP(id) /*qc2rust::macro_begin::REGISTER_SP*/REGISTER(Scores, SP,  /*qc2rust::param_begin::id*/id /*qc2rust::param_end::id*/, m_id, new_pure(PlayerScoreField)) /*qc2rust::macro_end::REGISTER_SP*/
REGISTRY(Scores, MAX_SCORE);
/*qc2rust::define::Scores_from*/
#define Scores_from(i) /*qc2rust::macro_begin::Scores_from*/_Scores_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NULL) /*qc2rust::macro_end::Scores_from*/
REGISTER_REGISTRY(Scores)
REGISTRY_SORT(Scores);
REGISTRY_CHECK(Scores);
STATIC_INIT(Scores_renumber) { FOREACH(Scores, true, it.m_id = i); }

/*
 * Score indices
 */

// game mode specific indices are not in common/, but in server/scores_rules.qc!
#ifdef GAMEQC
REGISTER_SP(END);

REGISTER_SP(PING);
REGISTER_SP(PL);
REGISTER_SP(NAME);
REGISTER_SP(KDRATIO);
REGISTER_SP(SUM);

REGISTER_SP(SEPARATOR);

REGISTER_SP(SCORE);

REGISTER_SP(DMG);
REGISTER_SP(DMGTAKEN);

REGISTER_SP(KILLS);
REGISTER_SP(DEATHS);
REGISTER_SP(SUICIDES);
REGISTER_SP(TEAMKILLS);
REGISTER_SP(FRAGS);

REGISTER_SP(ELO);

REGISTER_SP(FPS);

// TODO: move to common mutators

REGISTER_SP(RACE_TIME);
REGISTER_SP(RACE_LAPS);
REGISTER_SP(RACE_FASTEST);

//REGISTER_SP(CTS_TIME);
//REGISTER_SP(CTS_LAPS);
//REGISTER_SP(CTS_FASTEST);

REGISTER_SP(ASSAULT_OBJECTIVES);

REGISTER_SP(CTF_PICKUPS);
REGISTER_SP(CTF_FCKILLS);
REGISTER_SP(CTF_RETURNS);
REGISTER_SP(CTF_CAPS);
REGISTER_SP(CTF_CAPTIME);
REGISTER_SP(CTF_DROPS);

REGISTER_SP(DOM_TAKES);
REGISTER_SP(DOM_TICKS);

REGISTER_SP(FREEZETAG_REVIVALS);

REGISTER_SP(KEEPAWAY_PICKUPS);
REGISTER_SP(KEEPAWAY_BCTIME);
REGISTER_SP(KEEPAWAY_CARRIERKILLS);

REGISTER_SP(KH_PICKUPS);
REGISTER_SP(KH_CAPS);
REGISTER_SP(KH_KCKILLS);
REGISTER_SP(KH_PUSHES);
REGISTER_SP(KH_DESTROYS);
REGISTER_SP(KH_LOSSES);

REGISTER_SP(LMS_RANK);
REGISTER_SP(LMS_LIVES);

REGISTER_SP(NEXBALL_GOALS);
REGISTER_SP(NEXBALL_FAULTS);

REGISTER_SP(ONS_TAKES);
REGISTER_SP(ONS_CAPS);
#endif


// the stuff you don't need to see

/**
 * Lower scores are better (e.g. suicides)
 */
const int SFL_LOWER_IS_BETTER = BIT(0);

/**
 * Don't show zero values as scores
 */
const int SFL_HIDE_ZERO = BIT(1);

/**
 * Allow a column to be hidden (do not automatically add it even if it is a sorting key)
 */
const int SFL_ALLOW_HIDE = BIT(4);

/**
 * Display as a rank (with st, nd, rd, th suffix)
 */
const int SFL_RANK = BIT(5);

/**
 * Display as mm:ss.s, value is stored as 10ths of a second (AND 0 is the worst possible value!)
 */
const int SFL_TIME = BIT(6);

// not an extra constant yet
/*qc2rust::define::SFL_ZERO_IS_WORST*/
#define SFL_ZERO_IS_WORST /*qc2rust::macro_begin::SFL_ZERO_IS_WORST*/SFL_TIME /*qc2rust::macro_end::SFL_ZERO_IS_WORST*/

/**
 * Scoring priority (NOTE: PRIMARY is used for fraglimit)
 */
const int SFL_SORT_PRIO_SECONDARY = 4;
const int SFL_SORT_PRIO_PRIMARY = 8;
const int SFL_SORT_PRIO_MASK = 12;

/*qc2rust::define::IS_INCREASING*/
#define IS_INCREASING(x) /*qc2rust::macro_begin::IS_INCREASING*/( ( /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/) & SFL_LOWER_IS_BETTER ) /*qc2rust::macro_end::IS_INCREASING*/
/*qc2rust::define::IS_DECREASING*/
#define IS_DECREASING(x) /*qc2rust::macro_begin::IS_DECREASING*/( !(( /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/) & SFL_LOWER_IS_BETTER) ) /*qc2rust::macro_end::IS_DECREASING*/

USING(PlayerScoreField, entity);
.int _scores[MAX_SCORE];
.string m_name;
.int m_flags;

/*qc2rust::define::scores*/
#define scores(this) /*qc2rust::macro_begin::scores*/_scores[( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/).m_id] /*qc2rust::macro_end::scores*/
/*qc2rust::define::scores_label*/
#define scores_label(this) /*qc2rust::macro_begin::scores_label*/(( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/).m_name) /*qc2rust::macro_end::scores_label*/
/*qc2rust::define::scores_flags*/
#define scores_flags(this) /*qc2rust::macro_begin::scores_flags*/(( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/).m_flags) /*qc2rust::macro_end::scores_flags*/

/*qc2rust::define::MAX_TEAMSCORE*/
#define MAX_TEAMSCORE /*qc2rust::macro_begin::MAX_TEAMSCORE*/2 /*qc2rust::macro_end::MAX_TEAMSCORE*/
USING(ScoreTeam, string);
.int _teamscores[MAX_TEAMSCORE];
/*qc2rust::define::teamscores*/
#define teamscores(i) /*qc2rust::macro_begin::teamscores*/_teamscores[ /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/] /*qc2rust::macro_end::teamscores*/
string _teamscores_label[MAX_TEAMSCORE];
/*qc2rust::define::teamscores_label*/
#define teamscores_label(i) /*qc2rust::macro_begin::teamscores_label*/_teamscores_label[ /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/] /*qc2rust::macro_end::teamscores_label*/
int _teamscores_flags[MAX_TEAMSCORE];
/*qc2rust::define::teamscores_flags*/
#define teamscores_flags(i) /*qc2rust::macro_begin::teamscores_flags*/_teamscores_flags[ /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/] /*qc2rust::macro_end::teamscores_flags*/

const int ST_SCORE = 0;
