#pragma once

// negative = SVQC autochannels
// positive = one per entity

const int CH_INFO = 0;
const int CH_WEAPON_A = -1;
const int CH_WEAPON_B = -1;
const int CH_WEAPON_SINGLE = 1;
const int CH_VOICE = -2;
// const int CH_VOICE_SINGLE = 2;
const int CH_TRIGGER = -3;
const int CH_TRIGGER_SINGLE = 3;
const int CH_SHOTS = -4;
const int CH_SHOTS_SINGLE = 4;
// const int CH_TUBA = -5;
const int CH_TUBA_SINGLE = 5;
const int CH_PAIN = -6;
const int CH_PAIN_SINGLE = 6;
const int CH_PLAYER = -7;
const int CH_PLAYER_SINGLE = 7;
// const int CH_BGM_SINGLE = -8;
const int CH_BGM_SINGLE = 8;
const int CH_AMBIENT = -9;
const int CH_AMBIENT_SINGLE = 9;

const float ATTEN_NONE = 0;
const float ATTEN_MIN = 0.015625;
const float ATTEN_NORM = 0.5;
const float ATTEN_LARGE = 1;
const float ATTEN_IDLE = 2;
const float ATTEN_STATIC = 3;
const float ATTEN_MAX = 3.984375;

const float VOL_BASE = 0.7;
const float VOL_BASEVOICE = 1.0;
const float VOL_MUFFLED = 0.35;

// Play all sounds via sound7, for access to the extra channels.
// Otherwise, channels 8 to 15 would be blocked for a weird QW feature.
#ifdef SVQC
/*qc2rust::define::_sound*/
#define _sound(e,c,s,v,a) /*qc2rust::macro_begin::_sound*/MACRO_BEGIN 			entity __e =  /*qc2rust::param_begin::e*/e /*qc2rust::param_end::e*/; 			if (sound_allowed(MSG_BROADCAST, __e)) 				sound7(__e,  /*qc2rust::param_begin::c*/c /*qc2rust::param_end::c*/,  /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/,  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/, 0, 0); 		MACRO_END /*qc2rust::macro_end::_sound*/
#else
/*qc2rust::define::_sound*/
#define _sound(e,c,s,v,a) /*qc2rust::macro_begin::_sound*/sound7( /*qc2rust::param_begin::e*/e /*qc2rust::param_end::e*/,  /*qc2rust::param_begin::c*/c /*qc2rust::param_end::c*/,  /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/,  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/, 0, 0) /*qc2rust::macro_end::_sound*/
#endif
/*qc2rust::define::sound*/
#define sound(e,c,s,v,a) /*qc2rust::macro_begin::sound*/_sound( /*qc2rust::param_begin::e*/e /*qc2rust::param_end::e*/,  /*qc2rust::param_begin::c*/c /*qc2rust::param_end::c*/, Sound_fixpath( /*qc2rust::param_begin::s*/s /*qc2rust::param_end::s*/),  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/,  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/) /*qc2rust::macro_end::sound*/

/**
 * because sound7 didn't have origin
 *
 * @param e sound owner
 * @param o sound origin
 * @param chan sound channel
 * @param samp sound filename
 * @param vol sound volume
 * @param atten sound attenuation
 * @param speed
 * @param sf
 */
/*qc2rust::define::sound8*/
#define sound8(e,o,chan,samp,vol,atten,speed,sf) /*qc2rust::macro_begin::sound8*/MACRO_BEGIN 		entity __e; 		int __chan =  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/; 		string __samp =  /*qc2rust::param_begin::samp*/samp /*qc2rust::param_end::samp*/; 		bool auto = false; 		if (__chan > 0) __e =  /*qc2rust::param_begin::e*/e /*qc2rust::param_end::e*/; 		else 		{ 			auto = true; 			__chan = fabs(__chan); 			entity tmp = __e = new(csqc_autochannel); 			setthink(tmp, SUB_Remove); 			tmp.nextthink = time + soundlength(__samp); 		} 		vector old_origin = __e.origin; 		vector old_mins = __e.mins; 		vector old_maxs = __e.maxs; 		setorigin(__e,  /*qc2rust::param_begin::o*/o /*qc2rust::param_end::o*/); 		setsize(__e, '0 0 0', '0 0 0'); 		sound7(__e, __chan, __samp,  /*qc2rust::param_begin::vol*/vol /*qc2rust::param_end::vol*/,  /*qc2rust::param_begin::atten*/atten /*qc2rust::param_end::atten*/,  /*qc2rust::param_begin::speed*/speed /*qc2rust::param_end::speed*/,  /*qc2rust::param_begin::sf*/sf /*qc2rust::param_end::sf*/); 		if (!auto) 		{ 			setorigin(__e, old_origin); 			setsize(__e, old_mins, old_maxs); 		} 	MACRO_END /*qc2rust::macro_end::sound8*/

string _Sound_fixpath(string base)
{
	if (base == "") return string_null;
#ifdef SVQC
	return strcat(base, ".wav");  // let the client engine decide
#else
/*qc2rust::define::extensions*/
#define extensions(x) /*qc2rust::macro_begin::extensions*/ /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/(wav) 	 /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/(ogg) 	 /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/(flac) 	/**/ /*qc2rust::macro_end::extensions*/
/*qc2rust::define::tryext*/
#define tryext(ext) /*qc2rust::macro_begin::tryext*/{ 		string s = strcat(base, "."  /*qc2rust::stringify_begin::ext*/#ext /*qc2rust::stringify_end::ext*/); 		if (fexists(strcat("sound/", s))) { 			return s; 		} 	} /*qc2rust::macro_end::tryext*/
	extensions(tryext);
	LOG_WARNF("Missing sound: \"%s\"", strcat("sound/", base));
#undef tryext
#undef extensions
	return string_null;
#endif
}

CLASS(Sound, Object)
	ATTRIB(Sound, m_id, int, 0);
	ATTRIB(Sound, sound_str, string());
	ATTRIB(Sound, sound_str_, string);
	CONSTRUCTOR(Sound, string() path)
	{
		CONSTRUCT(Sound);
		this.sound_str = path;
	}
	METHOD(Sound, sound_precache, void(Sound this))
	{
		TC(Sound, this);
		string s = _Sound_fixpath(this.sound_str());
		if (!s) return;
		profile(sprintf("precache_sound(\"%s\")", s));
		precache_sound(s);
		strcpy(this.sound_str_, s);
	}
ENDCLASS(Sound)

entity _Sound_fixpath_this;
string _Sound_fixpath_cached;
/*qc2rust::define::Sound_fixpath*/
#define Sound_fixpath(this) /*qc2rust::macro_begin::Sound_fixpath*/( 	_Sound_fixpath_this = ( /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/), 	_Sound_fixpath_cached = _Sound_fixpath_this.sound_str_, 	_Sound_fixpath_cached ? _Sound_fixpath_cached : _Sound_fixpath(_Sound_fixpath_this.sound_str()) ) /*qc2rust::macro_end::Sound_fixpath*/
