#pragma once

CLASS(PortoLaunch, Weapon)
/* spawnfunc */ ATTRIB(PortoLaunch, m_canonical_spawnfunc, string, "weapon_porto");
/* ammotype  */ ATTRIB(PortoLaunch, ammo_type, int, RES_NONE);
/* impulse   */ ATTRIB(PortoLaunch, impulse, int, 0);
/* flags     */ ATTRIB(PortoLaunch, spawnflags, int, WEP_TYPE_OTHER | WEP_FLAG_SUPERWEAPON | WEP_FLAG_NODUAL);
/* rating    */ ATTRIB(PortoLaunch, bot_pickupbasevalue, float, 0);
/* color     */ ATTRIB(PortoLaunch, wpcolor, vector, '0.5 0.5 0.5');
/* modelname */ ATTRIB(PortoLaunch, mdl, string, "porto");
#ifdef GAMEQC
/* model     */ ATTRIB(PortoLaunch, m_model, Model, MDL_PORTO_ITEM);
#endif
/* crosshair */ ATTRIB(PortoLaunch, w_crosshair, string, "gfx/crosshairporto");
/* crosshair */ ATTRIB(PortoLaunch, w_crosshair_size, float, 0.6);
/* wepimg    */ ATTRIB(PortoLaunch, model2, string, "weaponporto");
/* refname   */ ATTRIB(PortoLaunch, netname, string, "porto");
/* wepname   */ ATTRIB(PortoLaunch, m_name, string, _("Port-O-Launch"));

/*qc2rust::define::X*/
#define X(BEGIN,P,END,class,prefix) /*qc2rust::macro_begin::X*/ /*qc2rust::param_begin::BEGIN*/BEGIN /*qc2rust::param_end::BEGIN*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/) 		 /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, animtime, float, BOTH) 		 /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, lifetime, float, BOTH) 		 /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, refire, float, BOTH) 		 /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, secondary, float, NONE) 		 /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, speed, float, BOTH)          /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, switchdelay_drop, float, NONE) 		 /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, switchdelay_raise, float, NONE)          /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, weaponreplace, string,NONE)          /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, weaponstartoverride, float, NONE)          /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, weaponstart, float, NONE)          /*qc2rust::param_begin::P*/P /*qc2rust::param_end::P*/( /*qc2rust::param_begin::class*/class /*qc2rust::param_end::class*/,  /*qc2rust::param_begin::prefix*/prefix /*qc2rust::param_end::prefix*/, weaponthrowable, float, NONE) 	 /*qc2rust::param_begin::END*/END /*qc2rust::param_end::END*/() /*qc2rust::macro_end::X*/
    W_PROPS(X, PortoLaunch, porto)
#undef X
ENDCLASS(PortoLaunch)
REGISTER_WEAPON(PORTO, porto, NEW(PortoLaunch));

SPAWNFUNC_WEAPON(weapon_porto, WEP_PORTO)

#ifdef SVQC
.entity porto_current;
.vector porto_v_angle; // holds "held" view angles
.float porto_v_angle_held;
.vector right_vector;
.float porto_forbidden;

void W_Porto_Fail(entity this, float failhard);
#endif
