/*
 * Copyright (c) 2011 Rudolf Polzer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#pragma once

#include "common.qh"

/*qc2rust::define::CSQCMODEL_IF*/
#define CSQCMODEL_IF(cond) /*qc2rust::macro_begin::CSQCMODEL_IF*/ /*qc2rust::macro_end::CSQCMODEL_IF*/
/*qc2rust::define::CSQCMODEL_ENDIF*/
#define CSQCMODEL_ENDIF /*qc2rust::macro_begin::CSQCMODEL_ENDIF*/ /*qc2rust::macro_end::CSQCMODEL_ENDIF*/
/*qc2rust::define::CSQCMODEL_PROPERTY*/
#define CSQCMODEL_PROPERTY(flag,t,r,w,f) /*qc2rust::macro_begin::CSQCMODEL_PROPERTY*/. /*qc2rust::param_begin::t*/t /*qc2rust::param_end::t*/  /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/; /*qc2rust::macro_end::CSQCMODEL_PROPERTY*/
/*qc2rust::define::CSQCMODEL_PROPERTY_SCALED*/
#define CSQCMODEL_PROPERTY_SCALED(flag,t,r,w,f,s,mi,ma) /*qc2rust::macro_begin::CSQCMODEL_PROPERTY_SCALED*/CSQCMODEL_PROPERTY( /*qc2rust::param_begin::flag*/flag /*qc2rust::param_end::flag*/, /*qc2rust::param_begin::t*/t /*qc2rust::param_end::t*/, /*qc2rust::param_begin::r*/r /*qc2rust::param_end::r*/, /*qc2rust::param_begin::w*/w /*qc2rust::param_end::w*/, /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/) /*qc2rust::macro_end::CSQCMODEL_PROPERTY_SCALED*/
	ALLPROPERTIES
#undef CSQCMODEL_PROPERTY_SCALED
#undef CSQCMODEL_PROPERTY
#undef CSQCMODEL_ENDIF
#undef CSQCMODEL_IF

entity CSQCModel_server2csqc(int i);
.float csqcmodel_teleported;

// this is exported for custom frame animation code. Use with care.
// to update frames, first call this:
void CSQCModel_InterpolateAnimation_2To4_PreNote(entity this, int sf);
void CSQCModel_InterpolateAnimation_1To2_PreNote(entity this, int sf);
// then update frame, frame1time (and possibly frame2, frame2time, lerpfrac)
// if set_times is not set, caller is responsible for frame1time, frame2time, csqcmodel_lerpfractime!
void CSQCModel_InterpolateAnimation_2To4_Note(entity this, int sf, float set_times);
void CSQCModel_InterpolateAnimation_1To2_Note(entity this, int sf, float set_times);
// to retrieve animation state, call this
void CSQCModel_InterpolateAnimation_2To4_Do(entity this);
void CSQCModel_InterpolateAnimation_1To2_Do(entity this);
// will overwrite lerpfrac, lerpfrac3, lerpfrac4, and possibly clear frame*time if they are undisplayed according to lerpfracs
