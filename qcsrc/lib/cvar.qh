#pragma once

#include "nil.qh"
#include "progname.qh"
#include "static.qh"

ERASEABLE
void RegisterCvars(void(string name, string def, string desc, bool archive, string file) f) {}

ERASEABLE
bool cvar_value_issafe(string s)
{
	if (strstrofs(s, "\"", 0) >= 0) return false;
	if (strstrofs(s, "\\", 0) >= 0) return false;
	if (strstrofs(s, ";", 0) >= 0) return false;
	if (strstrofs(s, "$", 0) >= 0) return false;
	if (strstrofs(s, "\r", 0) >= 0) return false;
	if (strstrofs(s, "\n", 0) >= 0) return false;
	return true;
}

/** escape the string to make it safe for consoles */
ERASEABLE
string MakeConsoleSafe(string input)
{
	input = strreplace("\n", "", input);
	input = strreplace("\\", "\\\\", input);
	input = strreplace("$", "$$", input);
	input = strreplace("\"", "\\\"", input);
	return input;
}

ERASEABLE
void cvar_describe(string name, string desc)
{
	localcmd(sprintf("\nset %1$s \"$%1$s\" \"%2$s\"\n", name, MakeConsoleSafe(desc)));
}

ERASEABLE
void cvar_archive(string name)
{
	localcmd(sprintf("\nseta %1$s \"$%1$s\"\n", name));
}

ERASEABLE
void RegisterCvars_Set(string name, string def, string desc, bool archive, string file)
{
	cvar_describe(name, desc);
	if (archive) cvar_archive(name);
}

int RegisterCvars_Save_fd;
ERASEABLE
void RegisterCvars_Save(string name, string def, string desc, bool archive, string file)
{
	if (!archive) return;
	fputs(RegisterCvars_Save_fd, sprintf("seta %s \"%s\"\n", name, def));
}

STATIC_INIT_LATE(Cvars)
{
	RegisterCvars(RegisterCvars_Set);
	RegisterCvars_Save_fd = fopen(sprintf("default%s.cfg", PROGNAME), FILE_WRITE);
	if (RegisterCvars_Save_fd >= 0)
	{
		RegisterCvars(RegisterCvars_Save);
		fclose(RegisterCvars_Save_fd);
	}
}

const noref bool default_bool = false;
const noref int default_int = 0;
const noref float default_float = 0;
const noref string default_string = "";
const noref vector default_vector = '0 0 0';

/*qc2rust::define::repr_cvar_bool*/
#define repr_cvar_bool(x) /*qc2rust::macro_begin::repr_cvar_bool*/(( /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/) ? "1" : "0") /*qc2rust::macro_end::repr_cvar_bool*/
/*qc2rust::define::repr_cvar_int*/
#define repr_cvar_int(x) /*qc2rust::macro_begin::repr_cvar_int*/(ftos( /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/)) /*qc2rust::macro_end::repr_cvar_int*/
/*qc2rust::define::repr_cvar_float*/
#define repr_cvar_float(x) /*qc2rust::macro_begin::repr_cvar_float*/(ftos( /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/)) /*qc2rust::macro_end::repr_cvar_float*/
/*qc2rust::define::repr_cvar_string*/
#define repr_cvar_string(x) /*qc2rust::macro_begin::repr_cvar_string*/( /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/) /*qc2rust::macro_end::repr_cvar_string*/
/*qc2rust::define::repr_cvar_vector*/
#define repr_cvar_vector(x) /*qc2rust::macro_begin::repr_cvar_vector*/(sprintf("%v",  /*qc2rust::param_begin::x*/x /*qc2rust::param_end::x*/)) /*qc2rust::macro_end::repr_cvar_vector*/

//pseudo prototypes:
// void AUTOCVAR(<cvar_name>, <qc_var_type>, default_cvar_value, string desc)
// void AUTOCVAR_SAVE(<cvar_name>, <qc_var_type>, default_cvar_value, string desc)
//  where default_cvar_value has type <qc_var_type>
//  e.g.: AUTOCVAR(mycvar, float, 2.5, "cvar description")

#define __AUTOCVAR(file, archive, var, type, desc, default) 	ACCUMULATE void RegisterCvars(void(string, string, string, bool, string) f) 	{ 		f( #var, repr_cvar_##type(default), desc, archive, file); 	} 	type autocvar_##var = default
#define AUTOCVAR_5(file, archive, var, type, desc) 	__AUTOCVAR(file, archive, var, type, desc, default_##type)
/*qc2rust::define::AUTOCVAR_6*/
#define AUTOCVAR_6(file,archive,var,type,default,desc) /*qc2rust::macro_begin::AUTOCVAR_6*/__AUTOCVAR( /*qc2rust::param_begin::file*/file /*qc2rust::param_end::file*/,  /*qc2rust::param_begin::archive*/archive /*qc2rust::param_end::archive*/,  /*qc2rust::param_begin::var*/var /*qc2rust::param_end::var*/,  /*qc2rust::param_begin::type*/type /*qc2rust::param_end::type*/,  /*qc2rust::param_begin::desc*/desc /*qc2rust::param_end::desc*/,  /*qc2rust::param_begin::default*/default /*qc2rust::param_end::default*/) /*qc2rust::macro_end::AUTOCVAR_6*/
/*qc2rust::define::_AUTOCVAR*/
#define _AUTOCVAR(...) /*qc2rust::macro_begin::_AUTOCVAR*/EVAL__AUTOCVAR(OVERLOAD(AUTOCVAR, __FILE__,  /*qc2rust::param_begin::__VA_ARGS__*/__VA_ARGS__ /*qc2rust::param_end::__VA_ARGS__*/)) /*qc2rust::macro_end::_AUTOCVAR*/
/*qc2rust::define::EVAL__AUTOCVAR*/
#define EVAL__AUTOCVAR(...) /*qc2rust::macro_begin::EVAL__AUTOCVAR*/ /*qc2rust::param_begin::__VA_ARGS__*/__VA_ARGS__ /*qc2rust::param_end::__VA_ARGS__*/ /*qc2rust::macro_end::EVAL__AUTOCVAR*/
/*qc2rust::define::AUTOCVAR_SAVE*/
#define AUTOCVAR_SAVE(...) /*qc2rust::macro_begin::AUTOCVAR_SAVE*/_AUTOCVAR(true,  /*qc2rust::param_begin::__VA_ARGS__*/__VA_ARGS__ /*qc2rust::param_end::__VA_ARGS__*/) /*qc2rust::macro_end::AUTOCVAR_SAVE*/
/*qc2rust::define::AUTOCVAR*/
#define AUTOCVAR(...) /*qc2rust::macro_begin::AUTOCVAR*/_AUTOCVAR(false,  /*qc2rust::param_begin::__VA_ARGS__*/__VA_ARGS__ /*qc2rust::param_end::__VA_ARGS__*/) /*qc2rust::macro_end::AUTOCVAR*/
