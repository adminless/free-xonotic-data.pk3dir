#pragma once

#include "registry.qh"
#include "sort.qh"
#include "yenc.qh"

// netcode mismatch and not sure what caused it? developer_csqcentities 1

.string netname;
.int m_id;
.bool(entity this, entity sender, bool isNew) m_read;
#define NET_HANDLE(id, param) bool Net_Handle_##id(entity this, entity sender, param)

#define NET_GUARD(id)     bool Net_Handle_##id##_guard(entity this, entity sender, bool isNew) {         bool valid = false;         serialize_marker(to, valid);         if (!valid) LOG_FATALF("Last message not fully parsed: %s", _net_prevmsgstr);         _net_prevmsgstr = #id;         return Net_Handle_##id(this, sender, isNew);     }

#ifdef CSQC
string _net_prevmsgstr;
	#define REGISTER_NET_TEMP(id) 		NET_HANDLE(id, bool);         NET_GUARD(id); 		REGISTER(TempEntities, NET, id, m_id, new_pure(net_temp_packet)) { 			this.netname = #id; 			this.m_read = Net_Handle_##id##_guard; 		}
#else
	#define REGISTER_NET_TEMP(id) 		const bool NET_##id##_istemp = true; 		REGISTER(TempEntities, NET, id, m_id, new_pure(net_temp_packet)) 		{ 			this.netname = #id; 		}
#endif
/*qc2rust::define::REGISTER_NET_S2C*/
#define REGISTER_NET_S2C(id) /*qc2rust::macro_begin::REGISTER_NET_S2C*/REGISTER_NET_TEMP( /*qc2rust::param_begin::id*/id /*qc2rust::param_end::id*/) /*qc2rust::macro_end::REGISTER_NET_S2C*/

REGISTRY(TempEntities, BITS(8) - 80)
/*qc2rust::define::TempEntities_from*/
#define TempEntities_from(i) /*qc2rust::macro_begin::TempEntities_from*/_TempEntities_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NULL) /*qc2rust::macro_end::TempEntities_from*/
REGISTER_REGISTRY(TempEntities)
REGISTRY_SORT(TempEntities)
REGISTRY_CHECK(TempEntities)
STATIC_INIT(TempEntities_renumber) { FOREACH(TempEntities, true, it.m_id = 80 + i); }



#ifdef CSQC
	#define REGISTER_NET_LINKED(id) 		ACCUMULATE NET_HANDLE(id, bool isnew) 		{ 			this = __self; 			this.sourceLoc = __FILE__":"STR(__LINE__); 			if (!this) isnew = true; 		} 		NET_GUARD(id); 		REGISTER(LinkedEntities, NET, id, m_id, new_pure(net_linked_packet)) 		{ 			this.netname = #id; 			this.m_read = Net_Handle_##id##_guard; 		}
#else
	#define REGISTER_NET_LINKED(id) 		const bool NET_##id##_istemp = false; 		REGISTER(LinkedEntities, NET, id, m_id, new_pure(net_linked_packet)) 		{ 			this.netname = #id; 		}
#endif

REGISTRY(LinkedEntities, BITS(8) - 1)
/*qc2rust::define::LinkedEntities_from*/
#define LinkedEntities_from(i) /*qc2rust::macro_begin::LinkedEntities_from*/_LinkedEntities_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NULL) /*qc2rust::macro_end::LinkedEntities_from*/
REGISTER_REGISTRY(LinkedEntities)
REGISTRY_SORT(LinkedEntities)
REGISTRY_CHECK(LinkedEntities)
STATIC_INIT(LinkedEntities_renumber) { FOREACH(LinkedEntities, true, it.m_id = 1 + i); }



#ifdef SVQC
	#define REGISTER_NET_C2S(id) 		NET_HANDLE(id, bool); 		REGISTER(C2S_Protocol, NET, id, m_id, new_pure(net_c2s_packet)) 		{ 			this.netname = #id; 			this.m_read = Net_Handle_##id; 		}
#else
	#define REGISTER_NET_C2S(id) 		const bool NET_##id##_istemp = true; 		REGISTER(C2S_Protocol, NET, id, m_id, new_pure(net_c2s_packet)) 		{ 			this.netname = #id; 		}
#endif

REGISTRY(C2S_Protocol, BITS(8) - 1)
/*qc2rust::define::C2S_Protocol_from*/
#define C2S_Protocol_from(i) /*qc2rust::macro_begin::C2S_Protocol_from*/_C2S_Protocol_from( /*qc2rust::param_begin::i*/i /*qc2rust::param_end::i*/, NULL) /*qc2rust::macro_end::C2S_Protocol_from*/
REGISTER_REGISTRY(C2S_Protocol)
REGISTRY_SORT(C2S_Protocol)
REGISTRY_CHECK(C2S_Protocol)
STATIC_INIT(C2S_Protocol_renumber) { FOREACH(C2S_Protocol, true, it.m_id = i); }

#ifdef SVQC
	const int MSG_ENTITY = 5;

	.int SendFlags;

	IntrusiveList g_uncustomizables;
	STATIC_INIT(g_uncustomizables) { g_uncustomizables = IL_NEW(); }

	void Net_LinkEntity(entity e, bool docull, float dt, bool(entity this, entity to, int sendflags) sendfunc)
	{
		if (e.classname == "") e.classname = "net_linked";

		if (e.model == "" || e.modelindex == 0)
		{
			vector mi = e.mins;
			vector ma = e.maxs;
			_setmodel(e, "null");
			setsize(e, mi, ma);
		}

		setSendEntity(e, sendfunc);
		e.SendFlags = 0xFFFFFF;

		if (!docull) e.effects |= EF_NODEPTHTEST;

		if (dt)
		{
			e.nextthink = time + dt;
			setthink(e, SUB_Remove);
		}
	}

	void Net_UnlinkEntity(entity e)
	{
		setSendEntity(e, func_null);
	}

	.void(entity this) uncustomizeentityforclient;
	.float uncustomizeentityforclient_set;

	void SetCustomizer(entity e, bool(entity this, entity client) customizer, void(entity this) uncustomizer)
	{
		setcefc(e, customizer);
		e.uncustomizeentityforclient = uncustomizer;
		e.uncustomizeentityforclient_set = !!uncustomizer;
		if(uncustomizer)
			IL_PUSH(g_uncustomizables, e);
	}

	void UncustomizeEntitiesRun()
	{
		IL_EACH(g_uncustomizables, it.uncustomizeentityforclient_set, it.uncustomizeentityforclient(it));
	}

	STRING_ITERATOR(g_buf, string_null, 0);

	int ReadByte();

	void Net_ClientCommand(entity sender, string command)
	{
		// command matches `c2s "(.+)"`
		string buf = substring(command, argv_start_index(1) + 1, -2);
		if (buf == "") return;
		STRING_ITERATOR_SET(g_buf, buf, 0);
		for (int C2S; (C2S = ReadByte()) >= 0; )
		{
			entity reader = C2S_Protocol_from(C2S);
			if (reader && reader.m_read && reader.m_read(NULL, sender, true)) continue;
			LOG_SEVEREF("Net_ClientCommand() with malformed C2S=%d", C2S);
			return;
		}
		g_buf_i--;
		int expected = strlen(buf);
		if (g_buf_i > expected) LOG_WARNF("Underflow: %d", g_buf_i - expected);
		if (g_buf_i < expected) LOG_WARNF("Overrflow: %d", expected - g_buf_i);
	}

#endif

#ifdef CSQC
	const int MSG_C2S = 0;

/*qc2rust::define::Net_Accept*/
#define Net_Accept(classname) /*qc2rust::macro_begin::Net_Accept*/MACRO_BEGIN 			if (!this) this = new( /*qc2rust::param_begin::classname*/classname /*qc2rust::param_end::classname*/); 		MACRO_END /*qc2rust::macro_end::Net_Accept*/
/*qc2rust::define::Net_Reject*/
#define Net_Reject() /*qc2rust::macro_begin::Net_Reject*/MACRO_BEGIN 			if (this) delete(this); 		MACRO_END /*qc2rust::macro_end::Net_Reject*/

	string g_buf;

	void Net_Flush()
	{
		if (g_buf == "") return;
		localcmd("\ncmd c2s \"", strreplace("$", "$$", g_buf), "\"\n");
		strfree(g_buf);
	}
#endif

#if defined(CSQC)
	#define WriteHeader(to, id) 		WriteByte(to, NET_##id.m_id)
#elif defined(SVQC)
	#define WriteHeader(to, id) 		MACRO_BEGIN 			if (NET_##id##_istemp) WriteByte(to, SVC_TEMPENTITY); 			WriteByte(to, NET_##id.m_id); 			bool _net_valid = false; serialize_marker(to, _net_valid); 		MACRO_END
#endif

// serialization: new style

USING(Stream, int);
#if defined(SVQC)
/*qc2rust::define::stream_reading*/
#define stream_reading(stream) /*qc2rust::macro_begin::stream_reading*/false /*qc2rust::macro_end::stream_reading*/
/*qc2rust::define::stream_writing*/
#define stream_writing(stream) /*qc2rust::macro_begin::stream_writing*/true /*qc2rust::macro_end::stream_writing*/
#elif defined(CSQC)
/*qc2rust::define::stream_reading*/
#define stream_reading(stream) /*qc2rust::macro_begin::stream_reading*/true /*qc2rust::macro_end::stream_reading*/
/*qc2rust::define::stream_writing*/
#define stream_writing(stream) /*qc2rust::macro_begin::stream_writing*/false /*qc2rust::macro_end::stream_writing*/
#endif

#define serialize(T, stream, ...) MACRO_BEGIN     noref Stream _stream = stream;     serialize_##T(_stream, __VA_ARGS__); MACRO_END

#if defined(SVQC)
/*qc2rust::define::serialize_byte*/
#define serialize_byte(stream,this) /*qc2rust::macro_begin::serialize_byte*/MACRO_BEGIN 		WriteByte( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/,  /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/); 		MACRO_END /*qc2rust::macro_end::serialize_byte*/
#elif defined(CSQC)
/*qc2rust::define::serialize_byte*/
#define serialize_byte(stream,this) /*qc2rust::macro_begin::serialize_byte*/MACRO_BEGIN 		 /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/ = ReadByte(); 		MACRO_END /*qc2rust::macro_end::serialize_byte*/
#endif

#if defined(SVQC)
/*qc2rust::define::serialize_float*/
#define serialize_float(stream,this) /*qc2rust::macro_begin::serialize_float*/MACRO_BEGIN 		WriteCoord( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/,  /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/); 		MACRO_END /*qc2rust::macro_end::serialize_float*/
#elif defined(CSQC)
/*qc2rust::define::serialize_float*/
#define serialize_float(stream,this) /*qc2rust::macro_begin::serialize_float*/MACRO_BEGIN 		 /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/ = ReadCoord(); 		MACRO_END /*qc2rust::macro_end::serialize_float*/
#endif

/*qc2rust::define::serialize_vector*/
#define serialize_vector(stream,this) /*qc2rust::macro_begin::serialize_vector*/MACRO_BEGIN     vector _v =  /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/;     serialize_float( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _v.x);     serialize_float( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _v.y);     serialize_float( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _v.z);      /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/ = _v; MACRO_END /*qc2rust::macro_end::serialize_vector*/

/*qc2rust::define::serialize_marker*/
#define serialize_marker(stream,this) /*qc2rust::macro_begin::serialize_marker*/MACRO_BEGIN     if (NDEBUG) {          /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/ = true;     } else {         int _de = 0xDE, _ad = 0xAD, _be = 0xBE, _ef = 0xEF;         serialize_byte( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _de);         serialize_byte( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _ad);         serialize_byte( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _be);         serialize_byte( /*qc2rust::param_begin::stream*/stream /*qc2rust::param_end::stream*/, _ef);          /*qc2rust::param_begin::this*/this /*qc2rust::param_end::this*/ = (_de == 0xDE && _ad == 0xAD && _be == 0xBE && _ef == 0xEF);     } MACRO_END /*qc2rust::macro_end::serialize_marker*/

// serialization: old

#define ReadRegistered(r) r##_from(Read_byte())
/*qc2rust::define::WriteRegistered*/
#define WriteRegistered(r,to,it) /*qc2rust::macro_begin::WriteRegistered*/Write_byte( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::it*/it /*qc2rust::param_end::it*/.m_id) /*qc2rust::macro_end::WriteRegistered*/

/*qc2rust::define::Read_byte*/
#define Read_byte() /*qc2rust::macro_begin::Read_byte*/ReadByte() /*qc2rust::macro_end::Read_byte*/
/*qc2rust::define::Write_byte*/
#define Write_byte(to,f) /*qc2rust::macro_begin::Write_byte*/WriteByte( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/) /*qc2rust::macro_end::Write_byte*/

#if defined(CSQC)
	int ReadByte();
	void WriteByte(int to, int b)
	{
		assert(to == MSG_C2S);
		string s = string_null;
		yenc_single(b, s);
		string tmp = strcat(g_buf, s);
		strcpy(g_buf, tmp);
	}
	void WriteShort(int to, int b)
	{
		WriteByte(to, (b >> 8) & 0xFF);
		WriteByte(to, b & 0xFF);
	}
#elif defined(SVQC)
	int ReadByte()
	{
		int ret = -1;
		ydec_single(g_buf, ret);
		return ret;
	}
	int ReadShort()
	{
		return (ReadByte() << 8) | (ReadByte());
	}
	void WriteByte(int to, int b);
#endif

/*qc2rust::define::Read_int*/
#define Read_int() /*qc2rust::macro_begin::Read_int*/ReadInt24_t() /*qc2rust::macro_end::Read_int*/
/*qc2rust::define::Write_int*/
#define Write_int(to,f) /*qc2rust::macro_begin::Write_int*/WriteInt24_t( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/) /*qc2rust::macro_end::Write_int*/

/*qc2rust::define::Read_float*/
#define Read_float() /*qc2rust::macro_begin::Read_float*/ReadFloat() /*qc2rust::macro_end::Read_float*/
/*qc2rust::define::Write_float*/
#define Write_float(to,f) /*qc2rust::macro_begin::Write_float*/WriteFloat( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/) /*qc2rust::macro_end::Write_float*/

/*qc2rust::define::Read_string*/
#define Read_string() /*qc2rust::macro_begin::Read_string*/ReadString() /*qc2rust::macro_end::Read_string*/
/*qc2rust::define::Write_string*/
#define Write_string(to,f) /*qc2rust::macro_begin::Write_string*/WriteString( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/) /*qc2rust::macro_end::Write_string*/

#ifdef GAMEQC
	const float APPROXPASTTIME_ACCURACY_REQUIREMENT = 0.05;
/*qc2rust::define::APPROXPASTTIME_MAX*/
#define APPROXPASTTIME_MAX /*qc2rust::macro_begin::APPROXPASTTIME_MAX*/(16384 * APPROXPASTTIME_ACCURACY_REQUIREMENT) /*qc2rust::macro_end::APPROXPASTTIME_MAX*/
/*qc2rust::define::APPROXPASTTIME_RANGE*/
#define APPROXPASTTIME_RANGE /*qc2rust::macro_begin::APPROXPASTTIME_RANGE*/(64 * APPROXPASTTIME_ACCURACY_REQUIREMENT) /*qc2rust::macro_end::APPROXPASTTIME_RANGE*/

	#ifdef CSQC
		float servertime;
		entity ReadCSQCEntity()
		{
			int f = ReadShort();
			if (f == 0) return NULL;
			return findfloat(NULL, entnum, f);
		}
		int ReadInt24_t()
		{
			int v = ReadShort() << 8; // note: this is signed
			v += ReadByte();          // note: this is unsigned
			return v;
		}
/*qc2rust::define::ReadInt48_t*/
#define ReadInt48_t() /*qc2rust::macro_begin::ReadInt48_t*/vec2(ReadInt24_t(), ReadInt24_t()) /*qc2rust::macro_end::ReadInt48_t*/
/*qc2rust::define::ReadInt72_t*/
#define ReadInt72_t() /*qc2rust::macro_begin::ReadInt72_t*/vec3(ReadInt24_t(), ReadInt24_t(), ReadInt24_t()) /*qc2rust::macro_end::ReadInt72_t*/

		noref int _ReadSByte;
/*qc2rust::define::ReadSByte*/
#define ReadSByte() /*qc2rust::macro_begin::ReadSByte*/(_ReadSByte = ReadByte(), (_ReadSByte & BIT(7) ? -128 : 0) + (_ReadSByte & BITS(7))) /*qc2rust::macro_end::ReadSByte*/
/*qc2rust::define::ReadFloat*/
#define ReadFloat() /*qc2rust::macro_begin::ReadFloat*/ReadCoord() /*qc2rust::macro_end::ReadFloat*/
/*qc2rust::define::ReadVector*/
#define ReadVector() /*qc2rust::macro_begin::ReadVector*/vec3(ReadFloat(), ReadFloat(), ReadFloat()) /*qc2rust::macro_end::ReadVector*/
/*qc2rust::define::ReadVector2D*/
#define ReadVector2D() /*qc2rust::macro_begin::ReadVector2D*/vec2(ReadFloat(), ReadFloat()) /*qc2rust::macro_end::ReadVector2D*/

		float ReadApproxPastTime()
		{
			float dt = ReadByte();

			// map from range...PPROXPASTTIME_MAX / 256
			dt = (APPROXPASTTIME_MAX / 256) * (dt / (256 - dt));

			return servertime - dt;
		}

	#else
		void WriteInt24_t(float dst, float val)
		{
			float v;
			WriteShort(dst, (v = floor(val >> 8)));
			WriteByte(dst, val - (v << 8));  // 0..255
		}
		void WriteInt48_t(float dst, vector val)
		{
			WriteInt24_t(dst, val.x);
			WriteInt24_t(dst, val.y);
		}
		void WriteInt72_t(float dst, vector val)
		{
			WriteInt24_t(dst, val.x);
			WriteInt24_t(dst, val.y);
			WriteInt24_t(dst, val.z);
		}

/*qc2rust::define::WriteFloat*/
#define WriteFloat(to,f) /*qc2rust::macro_begin::WriteFloat*/WriteCoord( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::f*/f /*qc2rust::param_end::f*/) /*qc2rust::macro_end::WriteFloat*/
/*qc2rust::define::WriteVector*/
#define WriteVector(to,v) /*qc2rust::macro_begin::WriteVector*/MACRO_BEGIN WriteFloat( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/.x); WriteFloat( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/.y); WriteFloat( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/.z); MACRO_END /*qc2rust::macro_end::WriteVector*/
/*qc2rust::define::WriteVector2D*/
#define WriteVector2D(to,v) /*qc2rust::macro_begin::WriteVector2D*/MACRO_BEGIN WriteFloat( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/.x); WriteFloat( /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/,  /*qc2rust::param_begin::v*/v /*qc2rust::param_end::v*/.y); MACRO_END /*qc2rust::macro_end::WriteVector2D*/

		// this will use the value:
		//   128
		// accuracy near zero is APPROXPASTTIME_MAX/(256*255)
		// accuracy at x is 1/derivative, i.e.
		//   APPROXPASTTIME_MAX * (1 + 256 * (dt / APPROXPASTTIME_MAX))^2 / 65536
		void WriteApproxPastTime(float dst, float t)
		{
			float dt = time - t;

			// warning: this is approximate; do not resend when you don't have to!
			// be careful with sendflags here!
			// we want: 0 -> 0.05, 1 -> 0.1, ..., 255 -> 12.75

			// map to range...
			dt = 256 * (dt / ((APPROXPASTTIME_MAX / 256) + dt));

			// round...
			dt = rint(bound(0, dt, 255));

			WriteByte(dst, dt);
		}

		// allow writing to also pass through to spectators (like so spectators see the same centerprints as players for example)
/*qc2rust::define::WRITESPECTATABLE_MSG_ONE*/
#define WRITESPECTATABLE_MSG_ONE(to,statement) /*qc2rust::macro_begin::WRITESPECTATABLE_MSG_ONE*/MACRO_BEGIN 			entity prev = msg_entity; 			entity dst =  /*qc2rust::param_begin::to*/to /*qc2rust::param_end::to*/; 			FOREACH_CLIENT(IS_REAL_CLIENT(it), { 				if (it == dst || (it.classname == STR_SPECTATOR && it.enemy == dst)) 				{ 					msg_entity = it; 					LAMBDA( /*qc2rust::param_begin::statement*/statement /*qc2rust::param_end::statement*/); 				} 			}); 			msg_entity = prev; 		MACRO_END /*qc2rust::macro_end::WRITESPECTATABLE_MSG_ONE*/
	#endif
#endif
