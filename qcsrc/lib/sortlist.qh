#pragma once

entityclass(Sort);
// .float(entity,entity) sort_cmp;
classfield(Sort).entity chain, sort_next, sort_prev;

entity Sort_Spawn();

/**
 * Swap two neighbours in a sortlist.
 * @param a FIRST entity
 * @param b entity after a
 */
/*qc2rust::define::SORT_SWAP*/
#define SORT_SWAP(a,b) /*qc2rust::macro_begin::SORT_SWAP*/ /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/.sort_prev =  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/.sort_prev;                          	 /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/.sort_next =  /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/.sort_next;                          	if ( /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/.sort_next)  /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/.sort_next.sort_prev =  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/;          	if ( /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/.sort_prev)  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/.sort_prev.sort_next =  /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/;          	 /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/.sort_prev =  /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/;                                    	 /*qc2rust::param_begin::b*/b /*qc2rust::param_end::b*/.sort_next =  /*qc2rust::param_begin::a*/a /*qc2rust::param_end::a*/ /*qc2rust::macro_end::SORT_SWAP*/
