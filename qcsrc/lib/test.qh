#pragma once

// public:

/** Use UpperCamelCase for suite and test only */
#define TEST(suite, test) 	void _TEST_##suite##_##test(); 	ACCUMULATE int TEST_RunAll_accumulated(int f) { 		if (!TEST_Run(#suite "_" #test)) ++f; 		return = f; 	} 	void _TEST_##suite##_##test()

/** Must be present at the end of a test */
/*qc2rust::define::SUCCEED*/
#define SUCCEED() /*qc2rust::macro_begin::SUCCEED*/(TEST_ok = true) /*qc2rust::macro_end::SUCCEED*/

/** Add a failure, but continue */
/*qc2rust::define::ADD_FAILURE*/
#define ADD_FAILURE(msg) /*qc2rust::macro_begin::ADD_FAILURE*/MACRO_BEGIN 	++TEST_failed; 	LOG_WARN( /*qc2rust::param_begin::msg*/msg /*qc2rust::param_end::msg*/); MACRO_END /*qc2rust::macro_end::ADD_FAILURE*/

/** Add a failure and return */
/*qc2rust::define::FAIL*/
#define FAIL(msg) /*qc2rust::macro_begin::FAIL*/_TEST_ASSERT(ADD_FAILURE( /*qc2rust::param_begin::msg*/msg /*qc2rust::param_end::msg*/)) /*qc2rust::macro_end::FAIL*/

/*qc2rust::define::HasFatalFailure*/
#define HasFatalFailure() /*qc2rust::macro_begin::HasFatalFailure*/(TEST_fatal > 0) /*qc2rust::macro_end::HasFatalFailure*/

bool RUN_ALL_TESTS();

// difference between expect/assert: assert returns early

/*qc2rust::define::EXPECT_EQ*/
#define EXPECT_EQ(expected_,actual_) /*qc2rust::macro_begin::EXPECT_EQ*/MACRO_BEGIN 	int expected =  /*qc2rust::param_begin::expected_*/expected_ /*qc2rust::param_end::expected_*/; 	int actual =  /*qc2rust::param_begin::actual_*/actual_ /*qc2rust::param_end::actual_*/; 	if ((expected) != (actual)) { 		ADD_FAILURE(sprintf( 			"Value of: "  /*qc2rust::stringify_begin::actual_*/#actual_ /*qc2rust::stringify_end::actual_*/ "\n" 			"  Actual: %d\n" 			"Expected: %d\n", 			actual, expected 		)); 	} MACRO_END /*qc2rust::macro_end::EXPECT_EQ*/
/*qc2rust::define::ASSERT_EQ*/
#define ASSERT_EQ(expected,actual) /*qc2rust::macro_begin::ASSERT_EQ*/_TEST_ASSERT(EXPECT_EQ( /*qc2rust::param_begin::expected*/expected /*qc2rust::param_end::expected*/,  /*qc2rust::param_begin::actual*/actual /*qc2rust::param_end::actual*/)) /*qc2rust::macro_end::ASSERT_EQ*/

/*qc2rust::define::EXPECT_TRUE*/
#define EXPECT_TRUE(condition) /*qc2rust::macro_begin::EXPECT_TRUE*/EXPECT_EQ(true,  /*qc2rust::param_begin::condition*/condition /*qc2rust::param_end::condition*/) /*qc2rust::macro_end::EXPECT_TRUE*/
/*qc2rust::define::ASSERT_TRUE*/
#define ASSERT_TRUE(condition) /*qc2rust::macro_begin::ASSERT_TRUE*/ASSERT_EQ(true,  /*qc2rust::param_begin::condition*/condition /*qc2rust::param_end::condition*/) /*qc2rust::macro_end::ASSERT_TRUE*/

/*qc2rust::define::EXPECT_FALSE*/
#define EXPECT_FALSE(condition) /*qc2rust::macro_begin::EXPECT_FALSE*/EXPECT_EQ(false,  /*qc2rust::param_begin::condition*/condition /*qc2rust::param_end::condition*/) /*qc2rust::macro_end::EXPECT_FALSE*/
/*qc2rust::define::ASSERT_FALSE*/
#define ASSERT_FALSE(condition) /*qc2rust::macro_begin::ASSERT_FALSE*/ASSERT_EQ(false,  /*qc2rust::param_begin::condition*/condition /*qc2rust::param_end::condition*/) /*qc2rust::macro_end::ASSERT_FALSE*/

/*qc2rust::define::EXPECT_NE*/
#define EXPECT_NE(val1,val2) /*qc2rust::macro_begin::EXPECT_NE*/EXPECT_TRUE(( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/) != ( /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::EXPECT_NE*/
/*qc2rust::define::ASSERT_NE*/
#define ASSERT_NE(val1,val2) /*qc2rust::macro_begin::ASSERT_NE*/_TEST_ASSERT(EXPECT_NE( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/,  /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::ASSERT_NE*/

/*qc2rust::define::EXPECT_LT*/
#define EXPECT_LT(val1,val2) /*qc2rust::macro_begin::EXPECT_LT*/EXPECT_TRUE(( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/) < ( /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::EXPECT_LT*/
/*qc2rust::define::ASSERT_LT*/
#define ASSERT_LT(val1,val2) /*qc2rust::macro_begin::ASSERT_LT*/_TEST_ASSERT(EXPECT_LT( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/,  /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::ASSERT_LT*/

/*qc2rust::define::EXPECT_LE*/
#define EXPECT_LE(val1,val2) /*qc2rust::macro_begin::EXPECT_LE*/EXPECT_TRUE(( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/) <= ( /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::EXPECT_LE*/
/*qc2rust::define::ASSERT_LE*/
#define ASSERT_LE(val1,val2) /*qc2rust::macro_begin::ASSERT_LE*/_TEST_ASSERT(EXPECT_LE( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/,  /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::ASSERT_LE*/

/*qc2rust::define::EXPECT_GT*/
#define EXPECT_GT(val1,val2) /*qc2rust::macro_begin::EXPECT_GT*/EXPECT_TRUE(( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/) > ( /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::EXPECT_GT*/
/*qc2rust::define::ASSERT_GT*/
#define ASSERT_GT(val1,val2) /*qc2rust::macro_begin::ASSERT_GT*/_TEST_ASSERT(EXPECT_GT( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/,  /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::ASSERT_GT*/

/*qc2rust::define::EXPECT_GE*/
#define EXPECT_GE(val1,val2) /*qc2rust::macro_begin::EXPECT_GE*/EXPECT_TRUE(( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/) >= ( /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::EXPECT_GE*/
/*qc2rust::define::ASSERT_GE*/
#define ASSERT_GE(val1,val2) /*qc2rust::macro_begin::ASSERT_GE*/_TEST_ASSERT(EXPECT_GE( /*qc2rust::param_begin::val1*/val1 /*qc2rust::param_end::val1*/,  /*qc2rust::param_begin::val2*/val2 /*qc2rust::param_end::val2*/)) /*qc2rust::macro_end::ASSERT_GE*/

/*qc2rust::define::EXPECT_NO_FATAL_FAILURE*/
#define EXPECT_NO_FATAL_FAILURE(statement) /*qc2rust::macro_begin::EXPECT_NO_FATAL_FAILURE*/EXPECT_NO_FATAL_FAILURE_( /*qc2rust::param_begin::statement*/statement /*qc2rust::param_end::statement*/, { }) /*qc2rust::macro_end::EXPECT_NO_FATAL_FAILURE*/
/*qc2rust::define::ASSERT_NO_FATAL_FAILURE*/
#define ASSERT_NO_FATAL_FAILURE(statement) /*qc2rust::macro_begin::ASSERT_NO_FATAL_FAILURE*/EXPECT_NO_FATAL_FAILURE_( /*qc2rust::param_begin::statement*/statement /*qc2rust::param_end::statement*/, { ++TEST_fatal; return; }) /*qc2rust::macro_end::ASSERT_NO_FATAL_FAILURE*/

// private:

bool TEST_Run(string test);
int TEST_fatal;
bool TEST_ok;
int TEST_failed;

/*qc2rust::define::_TEST_ASSERT*/
#define _TEST_ASSERT(statement) /*qc2rust::macro_begin::_TEST_ASSERT*/MACRO_BEGIN 		LAMBDA( /*qc2rust::param_begin::statement*/statement /*qc2rust::param_end::statement*/); 		++TEST_fatal; return; 	MACRO_END /*qc2rust::macro_end::_TEST_ASSERT*/

/*qc2rust::define::EXPECT_NO_FATAL_FAILURE__*/
#define EXPECT_NO_FATAL_FAILURE__(statement,then) /*qc2rust::macro_begin::EXPECT_NO_FATAL_FAILURE__*/MACRO_BEGIN 		int TEST_prevfatal = TEST_fatal; 		LAMBDA( /*qc2rust::param_begin::statement*/statement /*qc2rust::param_end::statement*/); 		if (TEST_fatal != TEST_prevfatal) 			LAMBDA( /*qc2rust::param_begin::then*/then /*qc2rust::param_end::then*/); 	MACRO_END /*qc2rust::macro_end::EXPECT_NO_FATAL_FAILURE__*/

/*qc2rust::define::EXPECT_NO_FATAL_FAILURE_*/
#define EXPECT_NO_FATAL_FAILURE_(statement,then) /*qc2rust::macro_begin::EXPECT_NO_FATAL_FAILURE_*/EXPECT_NO_FATAL_FAILURE__( /*qc2rust::param_begin::statement*/statement /*qc2rust::param_end::statement*/, { 		LOG_WARNF( 			"  Actual: %d fatal failures\n" 			"Expected: no fatal failures\n", 			TEST_fatal - TEST_prevfatal 		); 		LAMBDA( /*qc2rust::param_begin::then*/then /*qc2rust::param_end::then*/); 	}) /*qc2rust::macro_end::EXPECT_NO_FATAL_FAILURE_*/
