#pragma once

#include "test.qh"

/*qc2rust::define::yenc_single*/
#define yenc_single(c,ret) /*qc2rust::macro_begin::yenc_single*/MACRO_BEGIN 		int conv =  /*qc2rust::param_begin::c*/c /*qc2rust::param_end::c*/; 		conv += 42; 		if (conv >= 256) conv -= 256; 		switch (conv) 		{ 			default: 			{ 				string yenc_it = chr2str(conv); 				 /*qc2rust::param_begin::ret*/ret /*qc2rust::param_end::ret*/ = yenc_it; 				break; 			} 			case 0: 			case '\n': 			case '\r': 			case '=': 			{ 				conv += 64; 				string yenc_it = chr2str('=', conv); 				 /*qc2rust::param_begin::ret*/ret /*qc2rust::param_end::ret*/ = yenc_it; 				break; 			} 		} 	MACRO_END /*qc2rust::macro_end::yenc_single*/

/*qc2rust::define::ydec_single*/
#define ydec_single(stringiter,ret) /*qc2rust::macro_begin::ydec_single*/MACRO_BEGIN 		int conv = STRING_ITERATOR_GET( /*qc2rust::param_begin::stringiter*/stringiter /*qc2rust::param_end::stringiter*/); 		if (conv <= 0) { 			 /*qc2rust::param_begin::ret*/ret /*qc2rust::param_end::ret*/ = -1; 		} else { 			if (conv == '=') { 				conv = STRING_ITERATOR_GET( /*qc2rust::param_begin::stringiter*/stringiter /*qc2rust::param_end::stringiter*/); 				conv -= 64; 			} 			if (conv < 42) conv += 256; 			conv -= 42; 			 /*qc2rust::param_begin::ret*/ret /*qc2rust::param_end::ret*/ = conv; 		} 	MACRO_END /*qc2rust::macro_end::ydec_single*/

TEST(yEnc, EncodeDecode)
{
	for (int i = 0; i <= 255; ++i)
	{
		int expect = i;

		string fragment = string_null;
		yenc_single(expect, fragment);

		int encdec = 0;
		STRING_ITERATOR(fragmentiterator, fragment, 0);
		ydec_single(fragmentiterator, encdec);

		EXPECT_EQ(expect, encdec);
	}
	SUCCEED();
}
