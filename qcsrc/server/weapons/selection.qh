#pragma once

#include <server/defs.qh>
#include <server/miscfunctions.qh>

// switch between weapons
void Send_WeaponComplain(entity e, float wpn, float type);

.float hasweapon_complain_spam;
bool client_hasweapon(entity this, Weapon wpn, .entity weaponentity, float andammo, bool complain);

.int weaponcomplainindex;
float W_GetCycleWeapon(entity this, string weaponorder, float dir, float imp, float complain, float skipmissing, .entity weaponentity);

/*qc2rust::define::w_getbestweapon*/
#define w_getbestweapon(ent,wepent) /*qc2rust::macro_begin::w_getbestweapon*/Weapons_from(W_GetCycleWeapon( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/, CS( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/).cvar_cl_weaponpriority, 0, -1, false, true,  /*qc2rust::param_begin::wepent*/wepent /*qc2rust::param_end::wepent*/)) /*qc2rust::macro_end::w_getbestweapon*/

void W_SwitchWeapon_Force(Player this, Weapon w, .entity weaponentity);

// perform weapon to attack (weaponstate and attack_finished check is here)
void W_SwitchToOtherWeapon(entity this, .entity weaponentity);
bool W_SwitchWeapon(entity this, Weapon imp, .entity weaponentity); // returns false if the player does not have the weapon
void W_SwitchWeapon_TryOthers(entity this, Weapon imp, .entity weaponentity);

void W_CycleWeapon(entity this, string weaponorder, float dir, .entity weaponentity);

void W_NextWeaponOnImpulse(entity this, float imp, .entity weaponentity);

// next weapon
void W_NextWeapon(entity this, float list, .entity weaponentity);

// prev weapon
void W_PreviousWeapon(entity this, float list, .entity weaponentity);

// previously used if exists and has ammo, (second) best otherwise
void W_LastWeapon(entity this, .entity weaponentity);
