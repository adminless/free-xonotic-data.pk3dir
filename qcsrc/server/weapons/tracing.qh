#pragma once

#include <server/defs.qh>
#include <server/miscfunctions.qh>

vector w_shotorg;
vector w_shotdir;
vector w_shotend;

// this function calculates w_shotorg and w_shotdir based on the weapon model
// offset, trueaim and antilag, and won't put w_shotorg inside a wall.
// make sure you call makevectors first (FIXME?)
void W_SetupShot_Dir_ProjectileSize_Range(entity ent, .entity weaponentity, vector s_forward, vector mi, vector ma, float antilag, float recoil, Sound snd, float chan, float maxdamage, float range, int deathtype);

/*qc2rust::define::W_SetupShot_Dir_ProjectileSize*/
#define W_SetupShot_Dir_ProjectileSize(ent,wepent,s_forward,mi,ma,antilag,recoil,snd,chan,maxdamage,deathtype) /*qc2rust::macro_begin::W_SetupShot_Dir_ProjectileSize*/W_SetupShot_Dir_ProjectileSize_Range( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepent*/wepent /*qc2rust::param_end::wepent*/,  /*qc2rust::param_begin::s_forward*/s_forward /*qc2rust::param_end::s_forward*/,  /*qc2rust::param_begin::mi*/mi /*qc2rust::param_end::mi*/,  /*qc2rust::param_begin::ma*/ma /*qc2rust::param_end::ma*/,  /*qc2rust::param_begin::antilag*/antilag /*qc2rust::param_end::antilag*/,  /*qc2rust::param_begin::recoil*/recoil /*qc2rust::param_end::recoil*/,  /*qc2rust::param_begin::snd*/snd /*qc2rust::param_end::snd*/,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::maxdamage*/maxdamage /*qc2rust::param_end::maxdamage*/, max_shot_distance,  /*qc2rust::param_begin::deathtype*/deathtype /*qc2rust::param_end::deathtype*/) /*qc2rust::macro_end::W_SetupShot_Dir_ProjectileSize*/
/*qc2rust::define::W_SetupShot_ProjectileSize*/
#define W_SetupShot_ProjectileSize(ent,wepent,mi,ma,antilag,recoil,snd,chan,maxdamage,deathtype) /*qc2rust::macro_begin::W_SetupShot_ProjectileSize*/W_SetupShot_Dir_ProjectileSize( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepent*/wepent /*qc2rust::param_end::wepent*/, v_forward,  /*qc2rust::param_begin::mi*/mi /*qc2rust::param_end::mi*/,  /*qc2rust::param_begin::ma*/ma /*qc2rust::param_end::ma*/,  /*qc2rust::param_begin::antilag*/antilag /*qc2rust::param_end::antilag*/,  /*qc2rust::param_begin::recoil*/recoil /*qc2rust::param_end::recoil*/,  /*qc2rust::param_begin::snd*/snd /*qc2rust::param_end::snd*/,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::maxdamage*/maxdamage /*qc2rust::param_end::maxdamage*/,  /*qc2rust::param_begin::deathtype*/deathtype /*qc2rust::param_end::deathtype*/) /*qc2rust::macro_end::W_SetupShot_ProjectileSize*/
/*qc2rust::define::W_SetupShot_Dir*/
#define W_SetupShot_Dir(ent,wepent,s_forward,antilag,recoil,snd,chan,maxdamage,deathtype) /*qc2rust::macro_begin::W_SetupShot_Dir*/W_SetupShot_Dir_ProjectileSize( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepent*/wepent /*qc2rust::param_end::wepent*/,  /*qc2rust::param_begin::s_forward*/s_forward /*qc2rust::param_end::s_forward*/, '0 0 0', '0 0 0',  /*qc2rust::param_begin::antilag*/antilag /*qc2rust::param_end::antilag*/,  /*qc2rust::param_begin::recoil*/recoil /*qc2rust::param_end::recoil*/,  /*qc2rust::param_begin::snd*/snd /*qc2rust::param_end::snd*/,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::maxdamage*/maxdamage /*qc2rust::param_end::maxdamage*/,  /*qc2rust::param_begin::deathtype*/deathtype /*qc2rust::param_end::deathtype*/) /*qc2rust::macro_end::W_SetupShot_Dir*/
/*qc2rust::define::W_SetupShot*/
#define W_SetupShot(ent,wepent,antilag,recoil,snd,chan,maxdamage,deathtype) /*qc2rust::macro_begin::W_SetupShot*/W_SetupShot_ProjectileSize( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepent*/wepent /*qc2rust::param_end::wepent*/, '0 0 0', '0 0 0',  /*qc2rust::param_begin::antilag*/antilag /*qc2rust::param_end::antilag*/,  /*qc2rust::param_begin::recoil*/recoil /*qc2rust::param_end::recoil*/,  /*qc2rust::param_begin::snd*/snd /*qc2rust::param_end::snd*/,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::maxdamage*/maxdamage /*qc2rust::param_end::maxdamage*/,  /*qc2rust::param_begin::deathtype*/deathtype /*qc2rust::param_end::deathtype*/) /*qc2rust::macro_end::W_SetupShot*/
/*qc2rust::define::W_SetupShot_Range*/
#define W_SetupShot_Range(ent,wepent,antilag,recoil,snd,chan,maxdamage,range,deathtype) /*qc2rust::macro_begin::W_SetupShot_Range*/W_SetupShot_Dir_ProjectileSize_Range( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepent*/wepent /*qc2rust::param_end::wepent*/, v_forward, '0 0 0', '0 0 0',  /*qc2rust::param_begin::antilag*/antilag /*qc2rust::param_end::antilag*/,  /*qc2rust::param_begin::recoil*/recoil /*qc2rust::param_end::recoil*/,  /*qc2rust::param_begin::snd*/snd /*qc2rust::param_end::snd*/,  /*qc2rust::param_begin::chan*/chan /*qc2rust::param_end::chan*/,  /*qc2rust::param_begin::maxdamage*/maxdamage /*qc2rust::param_end::maxdamage*/,  /*qc2rust::param_begin::range*/range /*qc2rust::param_end::range*/,  /*qc2rust::param_begin::deathtype*/deathtype /*qc2rust::param_end::deathtype*/) /*qc2rust::macro_end::W_SetupShot_Range*/

vector W_CalculateProjectileVelocity(entity actor, vector pvelocity, vector mvelocity, float forceAbsolute);

#if 0
float mspercallsum;
float mspercallsstyle;
float mspercallcount;
#endif

void W_SetupProjVelocity_Explicit(entity proj, vector dir, vector upDir, float pSpeed, float pUpSpeed, float pZSpeed, float spread, float forceAbsolute);

/*qc2rust::define::W_SetupProjVelocity_Basic*/
#define W_SetupProjVelocity_Basic(ent,pspeed,pspread) /*qc2rust::macro_begin::W_SetupProjVelocity_Basic*/W_SetupProjVelocity_Explicit( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/, w_shotdir, v_up,  /*qc2rust::param_begin::pspeed*/pspeed /*qc2rust::param_end::pspeed*/, 0, 0,  /*qc2rust::param_begin::pspread*/pspread /*qc2rust::param_end::pspread*/, false) /*qc2rust::macro_end::W_SetupProjVelocity_Basic*/

#define W_SetupProjVelocity_UP_PRE(ent,wepname,prefix) W_SetupProjVelocity_Explicit(ent, w_shotdir, v_up, WEP_CVAR(wepname, prefix##speed), WEP_CVAR(wepname, prefix##speed_up), WEP_CVAR(wepname, prefix##speed_z), WEP_CVAR(wepname, prefix##spread), false)
/*qc2rust::define::W_SetupProjVelocity_UP_PRI*/
#define W_SetupProjVelocity_UP_PRI(ent,wepname) /*qc2rust::macro_begin::W_SetupProjVelocity_UP_PRI*/W_SetupProjVelocity_Explicit( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/, w_shotdir, v_up, WEP_CVAR_PRI( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed), WEP_CVAR_PRI( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed_up), WEP_CVAR_PRI( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed_z), WEP_CVAR_PRI( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, spread), false) /*qc2rust::macro_end::W_SetupProjVelocity_UP_PRI*/
/*qc2rust::define::W_SetupProjVelocity_UP_SEC*/
#define W_SetupProjVelocity_UP_SEC(ent,wepname) /*qc2rust::macro_begin::W_SetupProjVelocity_UP_SEC*/W_SetupProjVelocity_Explicit( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/, w_shotdir, v_up, WEP_CVAR_SEC( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed), WEP_CVAR_SEC( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed_up), WEP_CVAR_SEC( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed_z), WEP_CVAR_SEC( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, spread), false) /*qc2rust::macro_end::W_SetupProjVelocity_UP_SEC*/

/*qc2rust::define::W_SetupProjVelocity_UP_BOTH*/
#define W_SetupProjVelocity_UP_BOTH(ent,wepname,isprimary) /*qc2rust::macro_begin::W_SetupProjVelocity_UP_BOTH*/if( /*qc2rust::param_begin::isprimary*/isprimary /*qc2rust::param_end::isprimary*/) { W_SetupProjVelocity_UP_PRI( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/); } 	else { W_SetupProjVelocity_UP_SEC( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/); } /*qc2rust::macro_end::W_SetupProjVelocity_UP_BOTH*/

#define W_SetupProjVelocity_PRE(ent,wepname,prefix) W_SetupProjVelocity_Explicit(ent, w_shotdir, v_up, WEP_CVAR(wepname, prefix##speed), 0, 0, WEP_CVAR(wepname, prefix##spread), false)
/*qc2rust::define::W_SetupProjVelocity_PRI*/
#define W_SetupProjVelocity_PRI(ent,wepname) /*qc2rust::macro_begin::W_SetupProjVelocity_PRI*/W_SetupProjVelocity_Explicit( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/, w_shotdir, v_up, WEP_CVAR_PRI( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed), 0, 0, WEP_CVAR_PRI( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, spread), false) /*qc2rust::macro_end::W_SetupProjVelocity_PRI*/
/*qc2rust::define::W_SetupProjVelocity_SEC*/
#define W_SetupProjVelocity_SEC(ent,wepname) /*qc2rust::macro_begin::W_SetupProjVelocity_SEC*/W_SetupProjVelocity_Explicit( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/, w_shotdir, v_up, WEP_CVAR_SEC( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, speed), 0, 0, WEP_CVAR_SEC( /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/, spread), false) /*qc2rust::macro_end::W_SetupProjVelocity_SEC*/

/*qc2rust::define::W_SetupProjVelocity_BOTH*/
#define W_SetupProjVelocity_BOTH(ent,wepname,isprimary) /*qc2rust::macro_begin::W_SetupProjVelocity_BOTH*/if( /*qc2rust::param_begin::isprimary*/isprimary /*qc2rust::param_end::isprimary*/) { W_SetupProjVelocity_PRI( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/); } 	else { W_SetupProjVelocity_SEC( /*qc2rust::param_begin::ent*/ent /*qc2rust::param_end::ent*/,  /*qc2rust::param_begin::wepname*/wepname /*qc2rust::param_end::wepname*/); } /*qc2rust::macro_end::W_SetupProjVelocity_BOTH*/

// ====================
//  Ballistics Tracing
// ====================

.float railgundistance;
.vector railgunforce;
void FireRailgunBullet (entity this, .entity weaponentity, vector start, vector end, float bdamage, float bforce, float mindist, float maxdist, float halflifedist, float forcehalflifedist, int deathtype);

entity fireBullet_trace_callback_eff;
entity fireBullet_last_hit;
void fireBullet_trace_callback(vector start, vector hit, vector end);
void fireBullet(entity this, .entity weaponentity, vector start, vector dir, float spread, float max_solid_penetration, float damage, float force, float dtype, entity tracer_effect);
